#pragma once
#include <array>
#include <bit>
#include <cassert>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <list>
#include <sstream>
#include <vector>

#define MAX_PLY 125
#define BENCH_DEPTH 13

// Random big num
#ifdef _MSC_VER
    #include <__msvc_int128.hpp>
using u128 = std::_Unsigned128;
#else
using u128 = unsigned __int128;
#endif

//#define TUNE
// #define LMR_TUNE

// Struct for tunable parameters
struct TunableParam {
        std::string name;
        int value;
        int defaultValue;
        int min;
        int max;
        int step;
};

// History Constants
constexpr int16_t MAX_HISTORY = 16383;
const int16_t DEFAULT_HISTORY = 0;
constexpr int CORR_HIST_ENTRIES = 16384;
constexpr int PAWN_HIST_ENTRIES = 1024;
constexpr int MAX_CORR_HIST = 1024;
// NNUE Parameters
constexpr int16_t HL_N = 1024;
constexpr int16_t QA = 255;
constexpr int16_t QB = 64;
constexpr int16_t NNUE_SCALE = 400;
constexpr int OUTPUT_BUCKETS = 8;
const bool HORIZONTAL_MIRROR = true;

// Factorized LMR arrays
// {isQuiet, !isPV, improving, cutnode, ttpv, tthit, failhigh > 2}
const int LMR_ONE_COUNT = 7;
const int LMR_TWO_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) / 2;
const int LMR_THREE_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) * (LMR_ONE_COUNT - 2) / 6;
extern std::array<int, LMR_ONE_COUNT> LMR_ONE_PAIR;
extern std::array<int, LMR_TWO_COUNT> LMR_TWO_PAIR;
extern std::array<int, LMR_THREE_COUNT> LMR_THREE_PAIR;

// Expected Beta Cutoff Network
const double EBC_H1[16][8] = {
    {0.33809930086135864, 0.399944543838501, -0.10827872902154922, 1.0757193565368652, 0.22897456586360931, 1.891077995300293, -0.11085846275091171, 0.0007135046180337667}, {-0.49979183077812195, -0.2652798295021057, 0.22580116987228394, 0.520514190196991, -0.13411977887153625, 1.6435939073562622, -0.7147661447525024, 0.00205185916274786}, {0.08334837108850479, -0.23400503396987915, -0.027142006903886795, -0.7031535506248474, 0.24253596365451813, -1.1835732460021973, 0.1536618024110794, -0.0008150310604833066}, {-0.032596636563539505, 0.27701425552368164, 0.12890686094760895, -0.9851124882698059, -0.2548554241657257, -1.4123585224151611, 0.4310683012008667, -0.0004561642708722502}, {-1.2797576189041138, -0.17662683129310608, 0.19013647735118866, 0.427125483751297, 0.03832317888736725, 0.9054309129714966, -1.2267876863479614, -0.0010427861707285047}, {-0.24139909446239471, -0.16437599062919617, -0.2500571012496948, -0.30434080958366394, -0.2769438326358795, -1.0720685720443726, 0.051170412451028824, -0.0014342841459438205}, {0.33847305178642273, -0.3216984272003174, 0.11469728499650955, -0.3777107000350952, -0.2343677282333374, -1.1031423807144165, 0.5198068022727966, -0.0003998686443082988}, {-0.008074920624494553, -0.11565778404474258, -0.03144833445549011, -0.29075732827186584, -0.09339780360460281, -1.1254045963287354, 0.29651543498039246, -0.0018263596575707197}, {0.3246522843837738, -0.13960687816143036, -0.23636476695537567, 0.4594299793243408, -0.2625081241130829, 1.288600206375122, 0.0651911050081253, 0.0026821582578122616}, {-0.17882949113845825, -0.32177746295928955, -0.0425703302025795, 0.6434773802757263, 0.28881996870040894, 1.2156404256820679, -0.5410106182098389, 0.0010031504789367318}, {-0.36495861411094666, 0.1122235655784607, 0.17787165939807892, -0.8259155750274658, 0.1524944007396698, -1.3343981504440308, 0.43942567706108093, -0.0007888241671025753}, {0.6720263361930847, -0.031659580767154694, 0.25195083022117615, -0.3986002504825592, -0.16496339440345764, -1.5519732236862183, 0.5230451226234436, -3.814826868620003e-06}, {-0.14141196012496948, 0.33062219619750977, -0.2774415910243988, -0.5200473666191101, 0.22936376929283142, -1.4628348350524902, 0.013710458762943745, 0.00041822210187092423}, {-0.3501298725605011, 0.18632034957408905, 0.3069382905960083, 0.2735941410064697, 0.3015226423740387, 0.8965904712677002, -0.29096174240112305, 5.252765549812466e-05}, {0.23125804960727692, -0.3323419392108917, 0.07883948087692261, -0.14037694036960602, 0.0981016457080841, -1.0718361139297485, 0.10412397980690002, -0.0005554367671720684}, {0.28400707244873047, 0.2036445289850235, 0.1035103052854538, 1.113837718963623, 0.015739072114229202, 1.3009933233261108, -0.6460357308387756, 0.0010643682908266783}
};
const double EBC_H1_BIAS[16] = {-0.17135760188102722, -0.9682385325431824, 0.10475310683250427, -0.05739833042025566, -1.1216557025909424, 0.21012820303440094, 0.1866815835237503, -0.35920435190200806, 0.09763949364423752, -0.3606233596801758, -0.12418746203184128, 0.24293319880962372, -0.7384403944015503, -0.008778318762779236, 0.41368618607521057, 0.2368236929178238};
const double EBC_OUTPUT[16] = {0.08532345294952393, 0.09910079836845398, -0.16255047917366028, -0.037077005952596664, 0.03765874356031418, -0.14021871984004974, -0.028191067278385162, -0.23922383785247803, 0.24830812215805054, 0.17721803486347198, -0.1639454960823059, -0.005185573827475309, -0.0700533464550972, 0.004355309065431356, -0.07909984886646271, 0.1302940547466278};
const double EBC_OUTPUT_BIAS = -0.09458008408546448;
const double EBC_THREHOLD = 4.59;


std::list<TunableParam>& tunables();
TunableParam& addTunableParam(std::string name, int value, int min, int max, int step);
int lmrConvolution(std::array<bool, LMR_ONE_COUNT> features);
bool ebcInference(int depth, int eval, int beta, bool improving, int corrplexity, bool cutnode, bool tthit, int history);
void printOBConfig();
void printWeatherFactoryConfig();

#define TUNABLE_PARAM(name, val, min, max, step)                                                                       \
    inline TunableParam& name##Param = addTunableParam(#name, val, min, max, step);                                    \
    inline int name() {                                                                                                \
        return name##Param.value;                                                                                      \
    }

// History Parameters
TUNABLE_PARAM(PAWN_CORR_WEIGHT, 210, 64, 2048, 32)
TUNABLE_PARAM(MAJOR_CORR_WEIGHT, 141, 64, 2048, 32)
TUNABLE_PARAM(MINOR_CORR_WEIGHT, 150, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_STM_CORR_WEIGHT, 159, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_NSTM_CORR_WEIGHT, 163, 64, 2048, 32)
TUNABLE_PARAM(CONT_CORR_WEIGHT, 147, 64, 2048, 32)
TUNABLE_PARAM(CORRHIST_BONUS_WEIGHT, 92, 10, 300, 10);

TUNABLE_PARAM(HIST_BONUS_QUADRATIC, 7, 1, 10, 1)
TUNABLE_PARAM(HIST_BONUS_LINEAR, 276, 64, 384, 32);
TUNABLE_PARAM(HIST_BONUS_OFFSET, 138, 64, 768, 64);

TUNABLE_PARAM(HIST_MALUS_QUADRATIC, 6, 1, 10, 1)
TUNABLE_PARAM(HIST_MALUS_LINEAR, 275, 64, 384, 32);
TUNABLE_PARAM(HIST_MALUS_OFFSET, 197, 64, 768, 64);

// Time Management
TUNABLE_PARAM(NODE_TM_BASE, 161, 30, 200, 5)
TUNABLE_PARAM(NODE_TM_SCALE, 141, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_SCALE, 82, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_BASE, 76, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_DIVISOR, 391, 200, 800, 10)

// SEE
TUNABLE_PARAM(PAWN_VALUE, 98, 50, 200, 7)
TUNABLE_PARAM(KNIGHT_VALUE, 324, 300, 700, 25)
TUNABLE_PARAM(BISHOP_VALUE, 323, 300, 700, 25)
TUNABLE_PARAM(ROOK_VALUE, 508, 400, 1000, 30)
TUNABLE_PARAM(QUEEN_VALUE, 999, 800, 1600, 40)

// Search Parameters
TUNABLE_PARAM(RFP_SCALE, 77, 30, 100, 8);
TUNABLE_PARAM(RFP_CORRPLEXITY_SCALE, 60, 16, 128, 5);

TUNABLE_PARAM(RAZORING_SCALE, 305, 100, 350, 40);

TUNABLE_PARAM(NMP_BASE_REDUCTION, 5, 2, 5, 1);
TUNABLE_PARAM(NMP_REDUCTION_SCALE, 3, 3, 6, 1);
TUNABLE_PARAM(NMP_EVAL_SCALE, 213, 50, 300, 10);

TUNABLE_PARAM(HIST_PRUNING_SCALE, 2501, 512, 4096, 64)

TUNABLE_PARAM(FP_SCALE, 146, 30, 200, 8)
TUNABLE_PARAM(FP_OFFSET, 92, 60, 350, 16)
TUNABLE_PARAM(FP_HIST_DIVISOR, 309, 128, 512, 16)

TUNABLE_PARAM(BNFP_DEPTH_SCALE, 122, 30, 200, 8)
TUNABLE_PARAM(BNFP_MOVECOUNT_SCALE, 366, 150, 500, 12)

TUNABLE_PARAM(SE_BETA_SCALE, 30, 8, 64, 1);
TUNABLE_PARAM(SE_DOUBLE_MARGIN, 21, 0, 40, 2);

// LMR Table
TUNABLE_PARAM(LMR_BASE_QUIET, 141, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_QUIET, 273, 150, 350, 5);
TUNABLE_PARAM(LMR_BASE_NOISY, 24, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_NOISY, 333, 150, 350, 5);
// Reduction Constants
TUNABLE_PARAM(LMR_HIST_DIVISOR, 8922, 4096, 16385, 650);
TUNABLE_PARAM(LMR_BASE_SCALE, 1058, 256, 2048, 64)
// Deeper/Shallower
TUNABLE_PARAM(LMR_DEEPER_BASE, 36, 16, 64, 4)
TUNABLE_PARAM(LMR_DEEPER_SCALE, 3, 3, 12, 1)

TUNABLE_PARAM(SEE_NOISY_SCALE, -86, -128, -16, 16)
TUNABLE_PARAM(SEE_QUIET_SCALE, -74, -128, -16, 16)
TUNABLE_PARAM(QS_SEE_MARGIN, 8, -2000, 200, 30)

TUNABLE_PARAM(MIN_ASP_WINDOW_DEPTH, 3, 3, 8, 1);
TUNABLE_PARAM(INITIAL_ASP_WINDOW, 31, 8, 64, 4);
TUNABLE_PARAM(ASP_WIDENING_FACTOR, 4, 1, 32, 2);