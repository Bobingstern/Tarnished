#pragma once
#include <array>
#include <bit>
#include <cassert>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <list>
#include <sstream>
#include <vector>

#define MAX_PLY 125
#define BENCH_DEPTH 13

// Random big num
#ifdef _MSC_VER
    #include <__msvc_int128.hpp>
using u128 = std::_Unsigned128;
#else
using u128 = unsigned __int128;
#endif

//#define TUNE
// #define LMR_TUNE

// Struct for tunable parameters
struct TunableParam {
        std::string name;
        int value;
        int defaultValue;
        int min;
        int max;
        int step;
};

// History Constants
constexpr int16_t MAX_HISTORY = 16383;
const int16_t DEFAULT_HISTORY = 0;
constexpr int CORR_HIST_ENTRIES = 16384;
constexpr int PAWN_HIST_ENTRIES = 1024;
constexpr int MAX_CORR_HIST = 1024;
// NNUE Parameters
constexpr int16_t HL_N = 1024;
constexpr int16_t QA = 255;
constexpr int16_t QB = 64;
constexpr int16_t NNUE_SCALE = 400;
constexpr int OUTPUT_BUCKETS = 8;
const bool HORIZONTAL_MIRROR = true;

// Factorized LMR arrays
// {isQuiet, !isPV, improving, cutnode, ttpv, tthit, failhigh > 2}
const int LMR_ONE_COUNT = 7;
const int LMR_TWO_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) / 2;
const int LMR_THREE_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) * (LMR_ONE_COUNT - 2) / 6;
extern std::array<int, LMR_ONE_COUNT> LMR_ONE_PAIR;
extern std::array<int, LMR_TWO_COUNT> LMR_TWO_PAIR;
extern std::array<int, LMR_THREE_COUNT> LMR_THREE_PAIR;

const double LMR_H1[32][7] = {
    {-4.5486979484558105, -6.423924922943115, 2.956737995147705, -22.25410270690918, -6.257133960723877, 18.45846176147461, -5.631884574890137}, {6.695340633392334, 5.86167049407959, 9.283854484558105, 0.27978047728538513, 3.888597011566162, 1.0985816717147827, 7.718527793884277}, {6.295962810516357, 5.281199932098389, 9.28066635131836, -0.04014531895518303, 3.9750566482543945, 1.4308265447616577, 8.117570877075195}, {6.375677108764648, 5.806883811950684, 8.88311767578125, 0.5625936985015869, 3.545612335205078, 1.251815915107727, 7.85015344619751}, {21.33690643310547, -2.548630475997925, -36.60386657714844, 13.07142448425293, 4.621486186981201, 5.500333786010742, 5.792403697967529}, {4.51107931137085, 4.126620292663574, 14.807533264160156, -15.766934394836426, 5.519428253173828, -1.6730825901031494, -4.7624897956848145}, {6.67188835144043, 5.582036018371582, 8.691376686096191, 0.19914336502552032, 3.9619157314300537, 0.9695820212364197, 8.107173919677734}, {6.34780216217041, 5.665833950042725, 8.072885513305664, 0.19941188395023346, 3.695847749710083, 1.5100672245025635, 7.502294063568115}, {6.3577961921691895, 5.96960973739624, 8.488143920898438, 0.35443761944770813, 3.2721750736236572, 1.3948651552200317, 7.45065975189209}, {6.540746688842773, 5.948631286621094, 8.483940124511719, 0.38547104597091675, 3.08262038230896, 1.373895525932312, 7.907680511474609}, {-7.622335433959961, -2.861675500869751, 10.642645835876465, -11.981437683105469, 0.8366612195968628, -1.725775957107544, -7.017876625061035}, {6.2108259201049805, 5.173181056976318, 9.297712326049805, -0.0018263926031067967, 3.987537145614624, 1.3974379301071167, 7.89855432510376}, {3.893627643585205, -3.4384050369262695, 0.7944951057434082, 1.1990841627120972, 5.7868571281433105, -8.564384460449219, -5.223620891571045}, {-0.7830684781074524, 12.074556350708008, 3.8342082500457764, -14.425682067871094, 11.045781135559082, 12.095502853393555, -2.2177634239196777}, {1.1606850624084473, -4.323376178741455, 2.156428813934326, 4.201895713806152, 29.061588287353516, -13.478829383850098, 5.013689994812012}, {9.801644325256348, 14.330500602722168, 7.9381608963012695, -8.866613388061523, 8.033806800842285, 14.149463653564453, -6.4353532791137695}, {14.112666130065918, 29.15650177001953, -3.9757823944091797, 11.293530464172363, -24.06907844543457, 9.973822593688965, 2.3342702388763428}, {6.473400115966797, 5.973693370819092, 8.778786659240723, 0.06258825212717056, 3.103869915008545, 1.5043096542358398, 7.834323406219482}, {6.132973670959473, 5.581883430480957, 9.251201629638672, 0.3140210509300232, 3.7701594829559326, 1.424019455909729, 7.782814979553223}, {8.076460838317871, 9.671643257141113, -7.029356002807617, -25.953245162963867, 0.41231098771095276, 0.6710294485092163, 11.673333168029785}, {6.716693878173828, 5.6922478675842285, 8.929605484008789, 0.246551051735878, 3.239206552505493, 1.1711865663528442, 7.925932884216309}, {6.496148586273193, 6.033975124359131, 9.198132514953613, -0.02572453022003174, 3.3641104698181152, 1.0874236822128296, 7.632364749908447}, {7.090012073516846, 5.660836219787598, 8.702802658081055, 0.31171274185180664, 3.9110641479492188, 0.9341745972633362, 7.863314151763916}, {6.46275520324707, 5.764486312866211, 9.004373550415039, 0.30581244826316833, 3.6669089794158936, 1.0354162454605103, 7.853814601898193}, {-10.826120376586914, 5.670177936553955, 22.118995666503906, -8.500494956970215, 15.760435104370117, -9.288530349731445, 1.6877641677856445}, {34.39872360229492, 25.811033248901367, 7.384252071380615, 6.309189796447754, -18.275352478027344, 4.39324426651001, -1.5222692489624023}, {6.8219218254089355, 5.685397148132324, 9.247305870056152, 0.311883807182312, 3.4770350456237793, 1.3543376922607422, 7.722475051879883}, {-25.484127044677734, 37.880210876464844, -19.18670654296875, -3.8343453407287598, 6.009425163269043, -14.11382007598877, -2.1221766471862793}, {5.234103679656982, -5.485833644866943, 5.506494045257568, -19.327171325683594, 7.538181304931641, -4.642416477203369, -0.5035009980201721}, {6.585593223571777, 5.329970836639404, 9.043741226196289, 0.5828234553337097, 3.0795812606811523, 1.5834001302719116, 7.569484233856201}, {-8.129464149475098, -5.604188442230225, -0.9107553362846375, -8.845699310302734, 2.7682430744171143, 1.5547877550125122, -8.176448822021484}, {6.459936618804932, 5.808915615081787, 8.78750991821289, 0.3051150143146515, 3.5319671630859375, 0.31091952323913574, 8.037392616271973}
};

const double LMR_H1_BIAS[32] = {22.22309112548828, 6.513577938079834, 6.965981960296631, 6.747229099273682, 2.766223669052124, 6.202200412750244, 6.527270793914795, 6.615087509155273, 6.7458319664001465, 6.742184162139893, 11.678792953491211, 6.765288352966309, -5.435237884521484, 5.838561534881592, -12.2036771774292, 1.2597576379776, 0.24839504063129425, 6.206358432769775, 6.644349098205566, 6.539669036865234, 6.6306586265563965, 6.710878849029541, 6.3502655029296875, 6.4228620529174805, 4.73774528503418, -12.917912483215332, 6.7236857414245605, 28.340131759643555, 12.266974449157715, 6.009810924530029, 4.845407009124756, 6.820148944854736};

const double LMR_OUTPUT[32] = {-16.920196533203125, 6.682331085205078, 6.7300848960876465, 6.450831413269043, 21.050813674926758, -19.826704025268555, 6.6784186363220215, 6.518317222595215, 6.489364147186279, 6.37015438079834, -18.769969940185547, 6.774407863616943, -16.987247467041016, -8.38448715209961, -31.22920036315918, -9.722783088684082, 19.164289474487305, 6.64447546005249, 6.629352569580078, -24.46356964111328, 6.602671146392822, 6.864892482757568, 6.648878574371338, 6.662225246429443, -29.05950927734375, -24.674413681030273, 6.588676452636719, 21.00813865661621, -22.81817626953125, 6.639847755432129, 17.558916091918945, 6.811995029449463};

const double LMR_OUTPUT_BIAS = 3.815650224685669;

extern bool PRETTY_PRINT;

std::list<TunableParam>& tunables();
TunableParam& addTunableParam(std::string name, int value, int min, int max, int step);
int lmrConvolution(std::array<bool, LMR_ONE_COUNT> features);
int lmrInference(bool isQuiet, bool pv, bool improving, bool cutnode, bool ttpv, bool tthit, bool failhigh);
void printOBConfig();
void printWeatherFactoryConfig();

#define TUNABLE_PARAM(name, val, min, max, step)                                                                       \
    inline TunableParam& name##Param = addTunableParam(#name, val, min, max, step);                                    \
    inline int name() {                                                                                                \
        return name##Param.value;                                                                                      \
    }

// History Parameters
TUNABLE_PARAM(PAWN_CORR_WEIGHT, 210, 64, 2048, 32)
TUNABLE_PARAM(MAJOR_CORR_WEIGHT, 141, 64, 2048, 32)
TUNABLE_PARAM(MINOR_CORR_WEIGHT, 150, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_STM_CORR_WEIGHT, 159, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_NSTM_CORR_WEIGHT, 163, 64, 2048, 32)
TUNABLE_PARAM(CONT_CORR_WEIGHT, 147, 64, 2048, 32)
TUNABLE_PARAM(CORRHIST_BONUS_WEIGHT, 92, 10, 300, 10);

TUNABLE_PARAM(HIST_BONUS_QUADRATIC, 7, 1, 10, 1)
TUNABLE_PARAM(HIST_BONUS_LINEAR, 276, 64, 384, 32);
TUNABLE_PARAM(HIST_BONUS_OFFSET, 138, 64, 768, 64);

TUNABLE_PARAM(HIST_MALUS_QUADRATIC, 6, 1, 10, 1)
TUNABLE_PARAM(HIST_MALUS_LINEAR, 275, 64, 384, 32);
TUNABLE_PARAM(HIST_MALUS_OFFSET, 197, 64, 768, 64);

// Time Management
TUNABLE_PARAM(NODE_TM_BASE, 161, 30, 200, 5)
TUNABLE_PARAM(NODE_TM_SCALE, 141, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_SCALE, 82, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_BASE, 76, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_DIVISOR, 391, 200, 800, 10)

// SEE
TUNABLE_PARAM(PAWN_VALUE, 98, 50, 200, 7)
TUNABLE_PARAM(KNIGHT_VALUE, 324, 300, 700, 25)
TUNABLE_PARAM(BISHOP_VALUE, 323, 300, 700, 25)
TUNABLE_PARAM(ROOK_VALUE, 508, 400, 1000, 30)
TUNABLE_PARAM(QUEEN_VALUE, 999, 800, 1600, 40)

// Search Parameters
TUNABLE_PARAM(RFP_SCALE, 77, 30, 100, 8);
TUNABLE_PARAM(RFP_CORRPLEXITY_SCALE, 60, 16, 128, 5);

TUNABLE_PARAM(RAZORING_SCALE, 305, 100, 350, 40);

TUNABLE_PARAM(NMP_BASE_REDUCTION, 5, 2, 5, 1);
TUNABLE_PARAM(NMP_REDUCTION_SCALE, 3, 3, 6, 1);
TUNABLE_PARAM(NMP_EVAL_SCALE, 213, 50, 300, 10);

TUNABLE_PARAM(HIST_PRUNING_SCALE, 2501, 512, 4096, 64)

TUNABLE_PARAM(FP_SCALE, 146, 30, 200, 8)
TUNABLE_PARAM(FP_OFFSET, 92, 60, 350, 16)
TUNABLE_PARAM(FP_HIST_DIVISOR, 309, 128, 512, 16)

TUNABLE_PARAM(BNFP_DEPTH_SCALE, 122, 30, 200, 8)
TUNABLE_PARAM(BNFP_MOVECOUNT_SCALE, 366, 150, 500, 12)

TUNABLE_PARAM(SE_BETA_SCALE, 30, 8, 64, 1);
TUNABLE_PARAM(SE_DOUBLE_MARGIN, 21, 0, 40, 2);

// LMR Table
TUNABLE_PARAM(LMR_BASE_QUIET, 141, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_QUIET, 273, 150, 350, 5);
TUNABLE_PARAM(LMR_BASE_NOISY, 24, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_NOISY, 333, 150, 350, 5);
// Reduction Constants
TUNABLE_PARAM(LMR_HIST_DIVISOR, 8922, 4096, 16385, 650);
TUNABLE_PARAM(LMR_BASE_SCALE, 1058, 256, 2048, 64)
// Deeper/Shallower
TUNABLE_PARAM(LMR_DEEPER_BASE, 36, 16, 64, 4)
TUNABLE_PARAM(LMR_DEEPER_SCALE, 3, 3, 12, 1)

TUNABLE_PARAM(SEE_NOISY_SCALE, -86, -128, -16, 16)
TUNABLE_PARAM(SEE_QUIET_SCALE, -74, -128, -16, 16)
TUNABLE_PARAM(QS_SEE_MARGIN, 8, -2000, 200, 30)

TUNABLE_PARAM(MIN_ASP_WINDOW_DEPTH, 3, 3, 8, 1);
TUNABLE_PARAM(INITIAL_ASP_WINDOW, 31, 8, 64, 4);
TUNABLE_PARAM(ASP_WIDENING_FACTOR, 4, 1, 32, 2);