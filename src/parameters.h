#pragma once
#include <array>
#include <bit>
#include <cassert>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <list>
#include <sstream>
#include <vector>

#define MAX_PLY 125
#define BENCH_DEPTH 13

// Random big num
#ifdef _MSC_VER
    #include <__msvc_int128.hpp>
using u128 = std::_Unsigned128;
#else
using u128 = unsigned __int128;
#endif

//#define TUNE
// #define LMR_TUNE

// Struct for tunable parameters
struct TunableParam {
        std::string name;
        int value;
        int defaultValue;
        int min;
        int max;
        int step;
};

// History Constants
constexpr int16_t MAX_HISTORY = 16383;
const int16_t DEFAULT_HISTORY = 0;
constexpr int CORR_HIST_ENTRIES = 16384;
constexpr int PAWN_HIST_ENTRIES = 1024;
constexpr int MAX_CORR_HIST = 1024;
// NNUE Parameters
constexpr int16_t HL_N = 1024;
constexpr int16_t QA = 255;
constexpr int16_t QB = 64;
constexpr int16_t NNUE_SCALE = 400;
constexpr int OUTPUT_BUCKETS = 8;
const bool HORIZONTAL_MIRROR = true;

// Factorized LMR arrays
// {isQuiet, !isPV, improving, cutnode, ttpv, tthit, failhigh > 2}
const int LMR_ONE_COUNT = 7;
const int LMR_TWO_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) / 2;
const int LMR_THREE_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) * (LMR_ONE_COUNT - 2) / 6;
extern std::array<int, LMR_ONE_COUNT> LMR_ONE_PAIR;
extern std::array<int, LMR_TWO_COUNT> LMR_TWO_PAIR;
extern std::array<int, LMR_THREE_COUNT> LMR_THREE_PAIR;

const double LMR_H1[32][7] ={
    {-4.327842712402344, -6.203066825866699, 3.1764981746673584, -22.07457160949707, -6.036787986755371, 18.681228637695312, -5.41301155090332}, {6.474210739135742, 5.64076042175293, 9.063441276550293, 0.4586474895477295, 3.664990186691284, 0.8742325305938721, 7.498836040496826}, {6.0748419761657715, 5.060299873352051, 9.06026554107666, 0.13871252536773682, 3.7514584064483643, 1.2064913511276245, 7.897891521453857}, {6.154479026794434, 5.585911750793457, 8.6626558303833, 0.7415156364440918, 3.32193922996521, 1.027405023574829, 7.630405426025391}, {21.114633560180664, -2.770690441131592, -36.82714080810547, 13.415492057800293, 4.394532203674316, 5.276115894317627, 5.570438861846924}, {4.732293128967285, 4.347937107086182, 15.02566146850586, -15.575886726379395, 5.7407708168029785, -1.4505420923233032, -4.543741226196289}, {6.4507575035095215, 5.3611249923706055, 8.470963478088379, 0.3780120015144348, 3.7383077144622803, 0.7452304363250732, 7.887490749359131}, {6.126621246337891, 5.444880485534668, 7.853242874145508, 0.37831512093544006, 3.4721908569335938, 1.2856714725494385, 7.2825608253479}, {6.1366071701049805, 5.748648166656494, 8.267688751220703, 0.5333503484725952, 3.0485098361968994, 1.170464038848877, 7.230917453765869}, {6.319522857666016, 5.7276387214660645, 8.263456344604492, 0.5644099712371826, 2.858924388885498, 1.1494613885879517, 7.687910556793213}, {-7.439831256866455, -2.682847023010254, 10.860967636108398, -11.83560848236084, 1.0577327013015747, -1.559105396270752, -6.797561168670654}, {5.989715099334717, 4.952295780181885, 9.077322006225586, 0.17702221870422363, 3.7639496326446533, 1.1731125116348267, 7.678884983062744}, {4.113523006439209, -3.2183070182800293, 1.0114060640335083, 1.0210597515106201, 6.005410671234131, -8.340227127075195, -5.0072455406188965}, {-0.5647455453872681, 12.293442726135254, 4.050761699676514, -14.601966857910156, 11.26685905456543, 12.317645072937012, -2.0010018348693848}, {1.382047414779663, -4.103428363800049, 2.3777410984039307, 4.396354675292969, 29.283954620361328, -13.256836891174316, 5.234166145324707}, {10.020977020263672, 14.54958724975586, 8.1556978225708, -9.0430326461792, 8.255075454711914, 14.371769905090332, -6.218528747558594}, {13.890241622924805, 28.93556022644043, -4.1931047439575195, 11.471332550048828, -24.30244255065918, 9.74777889251709, 2.116018295288086}, {6.252257347106934, 5.752770900726318, 8.55836296081543, 0.2414642870426178, 2.880253314971924, 1.279949426651001, 7.614621162414551}, {5.911826133728027, 5.360957622528076, 9.030774116516113, 0.49289968609809875, 3.5465385913848877, 1.1996561288833618, 7.563109397888184}, {8.298447608947754, 9.893636703491211, -6.809706211090088, -25.92934226989746, 0.6337971091270447, 0.8936258554458618, 11.891575813293457}, {6.495537757873535, 5.471316337585449, 8.709171295166016, 0.42543500661849976, 3.015578508377075, 0.9468164443969727, 7.706223487854004}, {6.275066375732422, 5.81310510635376, 8.977758407592773, 0.15310510993003845, 3.1405460834503174, 0.8631207942962646, 7.412719249725342}, {6.868870735168457, 5.439915657043457, 8.482382774353027, 0.4905872941017151, 3.687448501586914, 0.7098169326782227, 7.643614768981934}, {6.241618633270264, 5.543570041656494, 8.783954620361328, 0.4846845865249634, 3.4432971477508545, 0.8110603094100952, 7.634117603302002}, {-10.621811866760254, 5.869967460632324, 22.337499618530273, -8.327988624572754, 15.98250961303711, -9.066572189331055, 1.9046432971954346}, {34.613868713378906, 26.03093910217285, 7.6016411781311035, 6.132092475891113, -18.05304527282715, 4.615185260772705, -1.3046954870224}, {6.60076379776001, 5.464463710784912, 9.026869773864746, 0.4907715916633606, 3.2534031867980957, 1.1299641132354736, 7.502763271331787}, {-25.704837799072266, 37.66401672363281, -19.40498161315918, -3.656435012817383, 5.788141250610352, -14.337759017944336, -2.3399658203125}, {5.455949306488037, -5.263885021209717, 5.727624893188477, -19.128337860107422, 7.759816646575928, -4.419643402099609, -0.28270089626312256}, {6.364449501037598, 5.109046459197998, 8.823314666748047, 0.7617025375366211, 2.8559634685516357, 1.3590388298034668, 7.349781513214111}, {-8.383369445800781, -5.839372634887695, -1.1628036499023438, -8.668681144714355, 2.5118918418884277, 1.30269193649292, -8.403303146362305}, {6.238837242126465, 5.588037014007568, 8.56712818145752, 0.4839553236961365, 3.308392286300659, 0.08660363405942917, 7.817729949951172}
};

const double LMR_H1_BIAS[32] = {22.445152282714844, 6.292266845703125, 6.744682788848877, 6.5258564949035645, 2.544081449508667, 6.423562526702881, 6.3059587478637695, 6.393726825714111, 6.5244669914245605, 6.520791530609131, 11.865058898925781, 6.543996334075928, -5.215142726898193, 6.056795120239258, -11.981760025024414, 1.478448510169983, 0.02665133774280548, 5.985036373138428, 6.423025131225586, 6.760745525360107, 6.409327507019043, 6.4896135330200195, 6.128946304321289, 6.201547145843506, 4.942535400390625, -12.697701454162598, 6.502350807189941, 28.119197845458984, 12.490015029907227, 5.788487911224365, 4.594024181365967, 6.598869800567627};

const double LMR_OUTPUT[32] = {-17.142105102539062, 6.461022853851318, 6.508692264556885, 6.229525566101074, 20.82845115661621, -20.046493530273438, 6.457070827484131, 6.2968854904174805, 6.26801061630249, 6.148834705352783, -18.985315322875977, 6.552985191345215, -16.76003646850586, -8.605917930603027, -31.440584182739258, -9.943594932556152, 18.94329261779785, 6.423075199127197, 6.40798282623291, -24.684906005859375, 6.381348133087158, 6.6435546875, 6.427560329437256, 6.440881252288818, -29.27609634399414, -24.89322853088379, 6.367371082305908, 20.785812377929688, -23.037534713745117, 6.418454170227051, 17.702173233032227, 6.590703010559082};

const double LMR_OUTPUT_BIAS = 3.595829725265503;

extern bool PRETTY_PRINT;

std::list<TunableParam>& tunables();
TunableParam& addTunableParam(std::string name, int value, int min, int max, int step);
int lmrConvolution(std::array<bool, LMR_ONE_COUNT> features);
int lmrInference(bool isQuiet, bool pv, bool improving, bool cutnode, bool ttpv, bool tthit, bool failhigh);
void printOBConfig();
void printWeatherFactoryConfig();

#define TUNABLE_PARAM(name, val, min, max, step)                                                                       \
    inline TunableParam& name##Param = addTunableParam(#name, val, min, max, step);                                    \
    inline int name() {                                                                                                \
        return name##Param.value;                                                                                      \
    }

// History Parameters
TUNABLE_PARAM(PAWN_CORR_WEIGHT, 210, 64, 2048, 32)
TUNABLE_PARAM(MAJOR_CORR_WEIGHT, 141, 64, 2048, 32)
TUNABLE_PARAM(MINOR_CORR_WEIGHT, 150, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_STM_CORR_WEIGHT, 159, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_NSTM_CORR_WEIGHT, 163, 64, 2048, 32)
TUNABLE_PARAM(CONT_CORR_WEIGHT, 147, 64, 2048, 32)
TUNABLE_PARAM(CORRHIST_BONUS_WEIGHT, 92, 10, 300, 10);

TUNABLE_PARAM(HIST_BONUS_QUADRATIC, 7, 1, 10, 1)
TUNABLE_PARAM(HIST_BONUS_LINEAR, 276, 64, 384, 32);
TUNABLE_PARAM(HIST_BONUS_OFFSET, 138, 64, 768, 64);

TUNABLE_PARAM(HIST_MALUS_QUADRATIC, 6, 1, 10, 1)
TUNABLE_PARAM(HIST_MALUS_LINEAR, 275, 64, 384, 32);
TUNABLE_PARAM(HIST_MALUS_OFFSET, 197, 64, 768, 64);

// Time Management
TUNABLE_PARAM(NODE_TM_BASE, 161, 30, 200, 5)
TUNABLE_PARAM(NODE_TM_SCALE, 141, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_SCALE, 82, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_BASE, 76, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_DIVISOR, 391, 200, 800, 10)

// SEE
TUNABLE_PARAM(PAWN_VALUE, 98, 50, 200, 7)
TUNABLE_PARAM(KNIGHT_VALUE, 324, 300, 700, 25)
TUNABLE_PARAM(BISHOP_VALUE, 323, 300, 700, 25)
TUNABLE_PARAM(ROOK_VALUE, 508, 400, 1000, 30)
TUNABLE_PARAM(QUEEN_VALUE, 999, 800, 1600, 40)

// Search Parameters
TUNABLE_PARAM(RFP_SCALE, 77, 30, 100, 8);
TUNABLE_PARAM(RFP_CORRPLEXITY_SCALE, 60, 16, 128, 5);

TUNABLE_PARAM(RAZORING_SCALE, 305, 100, 350, 40);

TUNABLE_PARAM(NMP_BASE_REDUCTION, 5, 2, 5, 1);
TUNABLE_PARAM(NMP_REDUCTION_SCALE, 3, 3, 6, 1);
TUNABLE_PARAM(NMP_EVAL_SCALE, 213, 50, 300, 10);

TUNABLE_PARAM(HIST_PRUNING_SCALE, 2501, 512, 4096, 64)

TUNABLE_PARAM(FP_SCALE, 146, 30, 200, 8)
TUNABLE_PARAM(FP_OFFSET, 92, 60, 350, 16)
TUNABLE_PARAM(FP_HIST_DIVISOR, 309, 128, 512, 16)

TUNABLE_PARAM(BNFP_DEPTH_SCALE, 122, 30, 200, 8)
TUNABLE_PARAM(BNFP_MOVECOUNT_SCALE, 366, 150, 500, 12)

TUNABLE_PARAM(SE_BETA_SCALE, 30, 8, 64, 1);
TUNABLE_PARAM(SE_DOUBLE_MARGIN, 21, 0, 40, 2);

// LMR Table
TUNABLE_PARAM(LMR_BASE_QUIET, 141, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_QUIET, 273, 150, 350, 5);
TUNABLE_PARAM(LMR_BASE_NOISY, 24, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_NOISY, 333, 150, 350, 5);
// Reduction Constants
TUNABLE_PARAM(LMR_HIST_DIVISOR, 8922, 4096, 16385, 650);
TUNABLE_PARAM(LMR_BASE_SCALE, 1058, 256, 2048, 64)
// Deeper/Shallower
TUNABLE_PARAM(LMR_DEEPER_BASE, 36, 16, 64, 4)
TUNABLE_PARAM(LMR_DEEPER_SCALE, 3, 3, 12, 1)

TUNABLE_PARAM(SEE_NOISY_SCALE, -86, -128, -16, 16)
TUNABLE_PARAM(SEE_QUIET_SCALE, -74, -128, -16, 16)
TUNABLE_PARAM(QS_SEE_MARGIN, 8, -2000, 200, 30)

TUNABLE_PARAM(MIN_ASP_WINDOW_DEPTH, 3, 3, 8, 1);
TUNABLE_PARAM(INITIAL_ASP_WINDOW, 31, 8, 64, 4);
TUNABLE_PARAM(ASP_WIDENING_FACTOR, 4, 1, 32, 2);