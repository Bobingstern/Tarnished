#pragma once
#include <array>
#include <bit>
#include <cassert>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <list>
#include <sstream>
#include <vector>

#define MAX_PLY 125
#define BENCH_DEPTH 13

// Random big num
#ifdef _MSC_VER
    #include <__msvc_int128.hpp>
using u128 = std::_Unsigned128;
#else
using u128 = unsigned __int128;
#endif

//#define TUNE
// #define LMR_TUNE

// Struct for tunable parameters
struct TunableParam {
        std::string name;
        int value;
        int defaultValue;
        int min;
        int max;
        int step;
};

// History Constants
constexpr int16_t MAX_HISTORY = 16383;
const int16_t DEFAULT_HISTORY = 0;
constexpr int CORR_HIST_ENTRIES = 16384;
constexpr int PAWN_HIST_ENTRIES = 1024;
constexpr int MAX_CORR_HIST = 1024;
// NNUE Parameters
constexpr int16_t HL_N = 1024;
constexpr int16_t QA = 255;
constexpr int16_t QB = 64;
constexpr int16_t NNUE_SCALE = 400;
constexpr int OUTPUT_BUCKETS = 8;
const bool HORIZONTAL_MIRROR = true;

// Factorized LMR arrays
// {isQuiet, !isPV, improving, cutnode, ttpv, tthit, failhigh > 2}
const int LMR_ONE_COUNT = 7;
const int LMR_TWO_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) / 2;
const int LMR_THREE_COUNT = LMR_ONE_COUNT * (LMR_ONE_COUNT - 1) * (LMR_ONE_COUNT - 2) / 6;
extern std::array<int, LMR_ONE_COUNT> LMR_ONE_PAIR;
extern std::array<int, LMR_TWO_COUNT> LMR_TWO_PAIR;
extern std::array<int, LMR_THREE_COUNT> LMR_THREE_PAIR;

// RFP Network
const double EBC_H1[16][7] = {
    {0.05009442940354347, -0.09361441433429718, -0.2551569640636444, 0.4358147382736206, 0.19267819821834564, 1.519375205039978, -0.05803702399134636}, {0.14912788569927216, 0.020533118396997452, -0.15240736305713654, -0.13865958154201508, 0.2040344625711441, -1.2055950164794922, 0.23372887074947357}, {-0.14030666649341583, 0.28144514560699463, 0.035141441971063614, -0.936497688293457, 0.09621235728263855, -1.0776840448379517, 0.12451011687517166}, {-0.7490730285644531, 0.21694418787956238, -0.332579106092453, -0.4618661105632782, 0.02326498180627823, -0.5149880051612854, -0.5952526926994324}, {0.01972770504653454, -0.02636275812983513, -0.22429029643535614, 0.34683722257614136, 0.18139567971229553, 1.2952724695205688, -0.2392037957906723}, {0.515457272529602, 0.035522863268852234, -0.18331468105316162, 0.13703793287277222, 0.23359550535678864, 1.2200528383255005, -0.30506059527397156}, {0.1639050841331482, -0.30678731203079224, -0.011143678799271584, 0.4464331269264221, -0.02932579070329666, 1.3910073041915894, -0.029678404331207275}, {0.09857666492462158, 0.13219474256038666, 0.23791733384132385, 1.1572046279907227, -0.10186107456684113, 1.3093796968460083, -0.3735944926738739}, {0.3873327970504761, 0.2337425798177719, -0.35077670216560364, 0.4576433598995209, 0.09532151371240616, 0.9179350733757019, 0.026489324867725372}, {0.1837289184331894, -0.1654178500175476, 0.016151592135429382, -0.46197065711021423, -0.017716968432068825, -1.3945033550262451, 0.43212392926216125}, {0.22075985372066498, -0.10517429560422897, -0.27997875213623047, -0.42346516251564026, 0.16003887355327606, -1.3349597454071045, 0.14686405658721924}, {-0.5956927537918091, 0.22959576547145844, 0.06808292865753174, -1.2069631814956665, -0.09839611500501633, -1.7674955129623413, 0.1901102364063263}, {0.24019500613212585, 0.030835818499326706, 0.07127956300973892, 0.967737078666687, -0.03597656637430191, 1.4833781719207764, -0.34576529264450073}, {-0.33680015802383423, -0.18676015734672546, 0.02519819512963295, -0.06595887988805771, -0.0368020199239254, 1.0025973320007324, 0.021886423230171204}, {-0.4939347803592682, -0.3522206246852875, 0.3503499925136566, -0.45039549469947815, 0.13713409006595612, 0.8119063377380371, -0.6727335453033447}, {0.22635014355182648, -0.16216282546520233, 0.24370527267456055, -0.7376794815063477, -0.07640067487955093, -1.729625940322876, 0.42799896001815796}    
};
const double EBC_H1_BIAS[16] = {0.07518252730369568, -0.12877357006072998, -0.08669981360435486, -0.2268463671207428, 0.24798108637332916, -0.029272451996803284, -0.1166374534368515, 0.017612159252166748, -0.10218876600265503, 0.35061749815940857, 0.3721657693386078, -0.7300611138343811, -0.14929427206516266, -0.4471777379512787, -1.01262366771698, 0.1818353533744812};
const double EBC_OUTPUT[16] = {0.03341769427061081, -0.14663808047771454, -0.07836654037237167, -0.05110755190253258, 0.08162162452936172, 0.08134873956441879, 0.1680973917245865, 0.04759862646460533, 0.15684092044830322, -0.3021870255470276, -0.17577002942562103, -0.019963709637522697, 0.24412138760089874, 0.13563868403434753, 0.02938315086066723, -0.14408929646015167};
const double EBC_OUTPUT_BIAS = -0.15242227911949158;
const double EBC_THREHOLD = 4.59;


std::list<TunableParam>& tunables();
TunableParam& addTunableParam(std::string name, int value, int min, int max, int step);
int lmrConvolution(std::array<bool, LMR_ONE_COUNT> features);
bool ebcInference(int depth, int eval, int beta, bool improving, int corrplexity, bool cutnode, bool tthit);
void printOBConfig();
void printWeatherFactoryConfig();

#define TUNABLE_PARAM(name, val, min, max, step)                                                                       \
    inline TunableParam& name##Param = addTunableParam(#name, val, min, max, step);                                    \
    inline int name() {                                                                                                \
        return name##Param.value;                                                                                      \
    }

// History Parameters
TUNABLE_PARAM(PAWN_CORR_WEIGHT, 210, 64, 2048, 32)
TUNABLE_PARAM(MAJOR_CORR_WEIGHT, 141, 64, 2048, 32)
TUNABLE_PARAM(MINOR_CORR_WEIGHT, 150, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_STM_CORR_WEIGHT, 159, 64, 2048, 32)
TUNABLE_PARAM(NON_PAWN_NSTM_CORR_WEIGHT, 163, 64, 2048, 32)
TUNABLE_PARAM(CONT_CORR_WEIGHT, 147, 64, 2048, 32)
TUNABLE_PARAM(CORRHIST_BONUS_WEIGHT, 92, 10, 300, 10);

TUNABLE_PARAM(HIST_BONUS_QUADRATIC, 7, 1, 10, 1)
TUNABLE_PARAM(HIST_BONUS_LINEAR, 276, 64, 384, 32);
TUNABLE_PARAM(HIST_BONUS_OFFSET, 138, 64, 768, 64);

TUNABLE_PARAM(HIST_MALUS_QUADRATIC, 6, 1, 10, 1)
TUNABLE_PARAM(HIST_MALUS_LINEAR, 275, 64, 384, 32);
TUNABLE_PARAM(HIST_MALUS_OFFSET, 197, 64, 768, 64);

// Time Management
TUNABLE_PARAM(NODE_TM_BASE, 161, 30, 200, 5)
TUNABLE_PARAM(NODE_TM_SCALE, 141, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_SCALE, 82, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_BASE, 76, 30, 200, 5)
TUNABLE_PARAM(COMPLEXITY_TM_DIVISOR, 391, 200, 800, 10)

// SEE
TUNABLE_PARAM(PAWN_VALUE, 98, 50, 200, 7)
TUNABLE_PARAM(KNIGHT_VALUE, 324, 300, 700, 25)
TUNABLE_PARAM(BISHOP_VALUE, 323, 300, 700, 25)
TUNABLE_PARAM(ROOK_VALUE, 508, 400, 1000, 30)
TUNABLE_PARAM(QUEEN_VALUE, 999, 800, 1600, 40)

// Search Parameters
TUNABLE_PARAM(RFP_SCALE, 77, 30, 100, 8);
TUNABLE_PARAM(RFP_CORRPLEXITY_SCALE, 60, 16, 128, 5);

TUNABLE_PARAM(RAZORING_SCALE, 305, 100, 350, 40);

TUNABLE_PARAM(NMP_BASE_REDUCTION, 5, 2, 5, 1);
TUNABLE_PARAM(NMP_REDUCTION_SCALE, 3, 3, 6, 1);
TUNABLE_PARAM(NMP_EVAL_SCALE, 213, 50, 300, 10);

TUNABLE_PARAM(HIST_PRUNING_SCALE, 2501, 512, 4096, 64)

TUNABLE_PARAM(FP_SCALE, 146, 30, 200, 8)
TUNABLE_PARAM(FP_OFFSET, 92, 60, 350, 16)
TUNABLE_PARAM(FP_HIST_DIVISOR, 309, 128, 512, 16)

TUNABLE_PARAM(BNFP_DEPTH_SCALE, 122, 30, 200, 8)
TUNABLE_PARAM(BNFP_MOVECOUNT_SCALE, 366, 150, 500, 12)

TUNABLE_PARAM(SE_BETA_SCALE, 30, 8, 64, 1);
TUNABLE_PARAM(SE_DOUBLE_MARGIN, 21, 0, 40, 2);

// LMR Table
TUNABLE_PARAM(LMR_BASE_QUIET, 141, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_QUIET, 273, 150, 350, 5);
TUNABLE_PARAM(LMR_BASE_NOISY, 24, -50, 200, 5);
TUNABLE_PARAM(LMR_DIVISOR_NOISY, 333, 150, 350, 5);
// Reduction Constants
TUNABLE_PARAM(LMR_HIST_DIVISOR, 8922, 4096, 16385, 650);
TUNABLE_PARAM(LMR_BASE_SCALE, 1058, 256, 2048, 64)
// Deeper/Shallower
TUNABLE_PARAM(LMR_DEEPER_BASE, 36, 16, 64, 4)
TUNABLE_PARAM(LMR_DEEPER_SCALE, 3, 3, 12, 1)

TUNABLE_PARAM(SEE_NOISY_SCALE, -86, -128, -16, 16)
TUNABLE_PARAM(SEE_QUIET_SCALE, -74, -128, -16, 16)
TUNABLE_PARAM(QS_SEE_MARGIN, 8, -2000, 200, 30)

TUNABLE_PARAM(MIN_ASP_WINDOW_DEPTH, 3, 3, 8, 1);
TUNABLE_PARAM(INITIAL_ASP_WINDOW, 31, 8, 64, 4);
TUNABLE_PARAM(ASP_WIDENING_FACTOR, 4, 1, 32, 2);